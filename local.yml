---
- name: Configure ansible-pull schedule
  hosts: localhost
  become: true
  vars:
    # Schedule is fed directly to cron
    schedule: '*/15'

    # User to run ansible-pull as from cron
    cron_user: root

    # File that ansible will use for logs
    logfile: /var/log/ansible-pull.log

    # Directory to where the repository will be cloned
    workdir: /var/lib/ansible/local

    # Repository to check out
    # repo must contain a local.yml file at the top level
    repo_url: https://github.com/jesseblacketter/vmboot.git
  tasks:
    - name: Create local directory to work from
      file:
        path: "{{ workdir }}"
        state: directory
        owner: root
        group: root
        mode: '0751'
    - name: Schedules ansible-pull to retrieve playbook updates
      ansible.builtin.cron:
        name: ansible-pull
        minute: "{{ schedule }}"
        user: root
        job: "ansible-pull -d {{ workdir }} -U {{ repo_url }} >>{{ logfile }} 2>&1"
        cron_file: ansible-pull
    - name: Create logrotate entry for ansible-pull.log
      template:
        src: templates/etc_logrotate.d_ansible-pull.j2
        dest: /etc/logrotate.d/ansible-pull
        owner: root
        group: root
        mode: '0644'

- name: Setup SonarQube Server
  hosts: localhost
  become: yes
  vars:
    sonarqube_install_location: "/opt/sonarqube"
    sonarqube_version: "1.0.1"
    sonarqube_user: "sonarqube"
    sonarqube_group: "sonarqube"
    sonarqube_service_name: "sonarqube"
    sonarqube_service_file_path: "/etc/systemd/system/{{ sonarqube_service_name }}.service"
    # Package dependencies with pinned versions
    sonarqube_dependencies:
      - "unzip={{ unzip_version }}"
      - "openjdk-17-jdk={{ openjdk_version }}"
      - "postgresql-client-common={{ postgresql_version }}"
    unzip_version: "6.0-26ubuntu3"
    openjdk_version: "17.0.2+8-1"
    postgresql_version: "238"
  tasks:
    - name: Install dependencies
      apt:
        name: "{{ sonarqube_dependencies }}"
        state: present
        update_cache: yes
    - name: Hold SonarQube dependencies at specified version
      apt:
        name: "{{ item }}"
        state: present
        allow_change_held_packages: yes
        allow_downgrade: yes
        dpkg_options: "hold"
      loop: "{{ sonarqube_dependencies }}"
    # - name: Hold SonarQube dependencies at specified version
    #   dpkg_selections:
    #     package: "{{ item }}"
    #     selection: "hold"
    #   loop: "{{ sonarqube_dependencies }}"
    - name: APT upgrade
      apt:
        upgrade: yes
      changed_when: false
    # - name: Manage data disk
    #   parted:
    #     device: /dev/sdb
    #     label: gpt
    #     name: primary
    #     state: present
    #     part_start: 0%
    #     part_end: 100%
    # - name: Partprobe to inform kernel
    #   command: partprobe /dev/sdb
    # - name: Create filesystem on the partition
    #   filesystem:
    #     fstype: ext4
    #     dev: /dev/sdb1
    # - name: Create SonarQube installation directory
    #   file:
    #     path: "{{ sonarqube_install_location }}"
    #     state: directory
    #     mode: '0777'
    # - name: Mount the data disk to SonarQube installation directory
    #   mount:
    #     path: "{{ sonarqube_install_location }}"
    #     src: /dev/sdb1
    #     fstype: ext4
    #     state: mounted
    #     opts: defaults,nofail
    # - name: Add fstab entry for the data disk
    #   lineinfile:
    #     path: /etc/fstab
    #     line: "/dev/sdb1 {{ sonarqube_install_location }} ext4 defaults,nofail 0 2"
    # - name: Baseline updates
    #   lineinfile:
    #     path: /etc/needrestart/conf.d/auto-restart.conf
    #     line: '$nrconf{restart} = "a";'
    # - name: Install SonarQube
    #   shell: |
    #     cd {{ sonarqube_install_location }}
    #     wget -O sonarqube.zip https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-{{ sonarqube_version }}.zip
    #     unzip sonarqube.zip
    #     mv sonarqube-{{ sonarqube_version }} sonarqube
    #     rm sonarqube.zip
    # - name: Increase Limits
    #   lineinfile:
    #     path: "{{ item.path }}"
    #     line: "{{ item.line }}"
    #   loop:
    #     - { path: '/etc/security/limits.conf', line: 'sonarqube  -  nofile  65536' }
    #     - { path: '/etc/security/limits.conf', line: 'sonarqube  -  nproc   4096' }
    #     - { path: '/etc/sysctl.conf', line: 'vm.max_map_count = 262144' }
    # - name: Create SonarQube group
    #   group:
    #     name: "{{ sonarqube_group }}"
    #     state: present
    # - name: Create SonarQube user
    #   user:
    #     name: "{{ sonarqube_user }}"
    #     group: "{{ sonarqube_group }}"
    #     home: "{{ sonarqube_install_location }}"
    #     system: yes
    #     createhome: yes
    # - name: Write systemd service unit file
    #   template:
    #     src: templates/sonarqube.service.j2
    #     dest: "{{ sonarqube_service_file_path }}"
    #   notify: Reload systemd
    # - name: Enable SonarQube service
    #   systemd:
    #     name: "{{ sonarqube_service_name }}"
    #     enabled: yes
    #     state: started
    # - name: Reboot (to enable new limits)
    #   command: shutdown -r +1 "System will reboot in 1 minute"
    #   async: 0
    #   poll: 0
    #   register: reboot_result
    #   changed_when: false
    #   when: sonarqube_reboot_required